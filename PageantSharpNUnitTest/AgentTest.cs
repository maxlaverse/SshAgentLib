using dlech.PageantSharp;
using System;
using System.Runtime.InteropServices;
using System.Collections.Generic;
using System.Security.Cryptography;
using Org.BouncyCastle.Crypto;
using Org.BouncyCastle.Crypto.Parameters;
using Org.BouncyCastle.Math;
using Org.BouncyCastle.Security;
using NUnit.Framework;
using PageantSharpNUnitTest.Properties;
using System.IO;
using System.Text;

namespace PageantSharpTest
{

  /// <summary>
  ///This is a test class for Agent class and is intended
  ///to contain all Agent Unit Tests
  ///</summary>
  [TestFixture()]
  public class AgentTest
  {
    private const string cAgentFailure = "AAAAAQU=";
    private const string cAgentSucess = "AAAAAQY=";

    private PpkKey mSsh2RsaKey;
    private List<PpkKey> mSsh2KeyList;


    [TestFixtureSetUp()]
    public void Setup()
    {
      PpkFile.WarnOldFileFormatCallback WarnOldFileFormat = delegate()
   {
     // do nothing
   };

      mSsh2RsaKey = PpkFile.ParseData(Resources.ssh2_rsa_no_passphrase_ppk,
                                      null, WarnOldFileFormat);
      mSsh2KeyList = new List<PpkKey>();
      mSsh2KeyList.Add(mSsh2RsaKey);


    }

    private class TestAgent : Agent
    {
      public TestAgent(GetSSH2KeyListCallback aGetSSH2KeyListCallback,
                       GetSSH2KeyCallback aGetSSH2KeyCallback,
                       AddSSH2KeyCallback aAddSSH2KeyCallback) :
        base(aGetSSH2KeyListCallback, aGetSSH2KeyCallback, aAddSSH2KeyCallback) { }
    }

   
    [Test()]
    public void TestAnswerSSH2_AGENTC_REQUEST_IDENTITIES()
    {
      string expected = "AAAAzAwAAAABAAAAlQAAAAdzc2gtcnNhAAAAASUAAACBAIVqnRL" +
        "P5c9a+C/GQAEu+q1+4Y966yP+hTZQcOhEW2tlRZp9gB8UMGZhx5qjPlLYmOe2p4Iw/X" +
        "0208y++AtPn/za0WPgWF39XBfruV5ozSsoK7CKt8jzGVeKvGHDf5bPQjnMpzkDCBJiR" +
        "ekNCw+xrfVL+co6nNgMu1VYRqmTZyHhAAAAKlBhZ2VhbnRTaGFycCB0ZXN0OiBTU0gy" +
        "LVJTQSwgbm8gcGFzc3BocmFzZQ==";

      Agent.GetSSH2KeyListCallback GetSsh2KeyList = delegate()
      {
        return mSsh2KeyList;
      };

      Agent agent = new TestAgent(GetSsh2KeyList, null, null);

      byte[] buffer = new byte[4096];
      BlobBuilder builder = new BlobBuilder();
      byte[] request = builder.GetBlob(OpenSsh.Message.SSH2_AGENTC_REQUEST_IDENTITIES);
      Array.Copy(request, buffer, 5);
      MemoryStream stream = new MemoryStream(buffer);
      agent.AnswerMessage(stream);
      byte[] response = new byte[stream.Position];
      stream.Position = 0;
      stream.Read(response, 0, response.Length);
      string actual = Encoding.UTF8.GetString(PSUtil.ToBase64(response));
      Assert.AreEqual(expected, actual);
    }

    [Test()]
    public void TestAnswerSSH2_AGENTC_SIGN_REQUEST()
    {
      byte[] rsaSignRequestData = new byte[] {
        0x00,0x00,0x03,0xd1,0x0d,0x00,0x00,0x01,0xb2,0x00,0x00,0x00,0x07,
        0x73,0x73,0x68,0x2d,0x64,0x73,0x73,0x00,0x00,0x00,0x81,0x00,0xf5,
        0x1d,0xd5,0x82,0x17,0x20,0x9b,0x71,0x4d,0x1f,0xb0,0xb5,0x6e,0x8a,
        0x93,0x15,0xc1,0xc8,0xeb,0xb0,0x16,0xc2,0xda,0x3d,0x54,0x90,0xc9,
        0xce,0x52,0x28,0x7a,0x2c,0xa8,0xf7,0x77,0x21,0x38,0x3d,0x7c,0x08,
        0x08,0x29,0xab,0x9e,0xb5,0x02,0x73,0xd3,0x94,0xa6,0x1a,0x47,0x95,
        0xd9,0x2c,0xf2,0xcd,0xd0,0xff,0xfc,0x6e,0x3f,0xe0,0x0f,0x05,0xf4,
        0xb1,0x69,0xef,0x8d,0x93,0x13,0x79,0x5b,0xb8,0x09,0x9a,0xb1,0xc6,
        0x64,0xf7,0x85,0x3e,0x9c,0xad,0x1c,0xcd,0x5d,0x4b,0xce,0xa0,0x09,
        0xb5,0x5e,0x04,0x58,0xe6,0xc1,0xdf,0x7e,0x01,0x23,0x43,0xba,0x38,
        0xf6,0x72,0x24,0x71,0x6c,0xf0,0xc1,0xd5,0xcf,0x07,0x64,0x31,0x93,
        0x37,0xd6,0xaf,0xd2,0x31,0x4b,0x35,0x1d,0x76,0x81,0x00,0x00,0x00,
        0x15,0x00,0xe6,0xc8,0xea,0x1b,0x64,0xd4,0x25,0xd4,0x4a,0x7c,0x4c,
        0xcb,0xd9,0xdf,0x81,0xcb,0x09,0x30,0x66,0xbd,0x00,0x00,0x00,0x80,
        0x46,0xf7,0x72,0x37,0xd0,0xf7,0xb1,0x4b,0x3e,0x18,0x9d,0x32,0x9f,
        0x4e,0xaa,0xf0,0x4d,0x9b,0x1c,0x69,0x6f,0x99,0x40,0x0e,0xae,0xb8,
        0x4b,0xb5,0xd7,0x23,0x18,0xc0,0x7e,0x4c,0xb7,0x88,0xef,0x7d,0xd9,
        0x3f,0xd1,0x38,0x2f,0x35,0xb6,0xaf,0x1c,0x0a,0xdf,0x14,0x7a,0xa6,
        0x51,0x31,0x7a,0x95,0x21,0x12,0xb3,0x1b,0x16,0x3b,0x0e,0xf0,0x9e,
        0xe1,0x51,0x16,0x4f,0x47,0xeb,0x03,0x83,0x5b,0xdc,0xe1,0x2c,0x1a,
        0x5f,0xa8,0xa4,0x78,0xe6,0x77,0xf6,0xf0,0x59,0x7d,0x72,0xf5,0x7d,
        0xe9,0x51,0xdc,0x06,0x59,0xcc,0xcf,0xda,0x05,0xd2,0xf4,0xe1,0x79,
        0xe1,0xd4,0x03,0x14,0x77,0x3d,0x2b,0x9a,0x67,0x1f,0xb0,0xb5,0x2c,
        0x4b,0x28,0x93,0xa5,0x0d,0xde,0x06,0xdf,0x1d,0x17,0x9e,0x00,0x00,
        0x00,0x81,0x00,0xf2,0x59,0x04,0xb1,0x74,0xb7,0x75,0x86,0x58,0x26,
        0x67,0x06,0xab,0xf7,0x8b,0xc1,0x5e,0xe7,0x18,0x1a,0x8e,0xaa,0x99,
        0x99,0x6e,0xd2,0xa5,0xbd,0xbe,0xcb,0xc1,0x56,0x44,0xa6,0x9f,0x3c,
        0xa9,0x2d,0x13,0xce,0x35,0x87,0x1b,0x51,0x9c,0xf0,0xdc,0xcc,0x6d,
        0xc2,0xc7,0x51,0x49,0xa6,0xf1,0x15,0xac,0xaa,0xb5,0x8a,0xb5,0x82,
        0x0b,0x2d,0x6e,0x14,0x91,0xe3,0x5d,0x21,0xf5,0xc1,0x4a,0xc0,0x31,
        0x67,0x6d,0xc3,0xdf,0xd9,0xec,0x5e,0x3b,0xb4,0x87,0xf3,0xf3,0xdd,
        0xaf,0x21,0x33,0xd2,0x51,0xa7,0x1e,0x9e,0xb9,0xef,0x28,0xca,0x0c,
        0x0a,0xa7,0xfe,0x95,0xad,0xa4,0x70,0xa4,0x1b,0xd4,0x53,0xf5,0x3a,
        0x16,0x3a,0x68,0xbb,0x1e,0x60,0x38,0x59,0xd7,0xb4,0xd0,0xf7,0x1d,
        0x9e,0x00,0x00,0x02,0x12,0x00,0x00,0x00,0x20,0xdb,0x95,0x01,0x1b,
        0x3c,0x73,0x47,0xb4,0xc6,0xf0,0x6b,0x6d,0xf1,0x95,0xe9,0x93,0x76,
        0xbf,0x75,0xd7,0x9d,0xc4,0x66,0x22,0x9e,0x55,0x34,0x03,0x1e,0xe4,
        0xe3,0x6a,0x32,0x00,0x00,0x00,0x08,0x6b,0x65,0x65,0x61,0x67,0x65,
        0x6e,0x74,0x00,0x00,0x00,0x0e,0x73,0x73,0x68,0x2d,0x63,0x6f,0x6e,
        0x6e,0x65,0x63,0x74,0x69,0x6f,0x6e,0x00,0x00,0x00,0x09,0x70,0x75,
        0x62,0x6c,0x69,0x63,0x6b,0x65,0x79,0x01,0x00,0x00,0x00,0x07,0x73,
        0x73,0x68,0x2d,0x64,0x73,0x73,0x00,0x00,0x01,0xb2,0x00,0x00,0x00,
        0x07,0x73,0x73,0x68,0x2d,0x64,0x73,0x73,0x00,0x00,0x00,0x81,0x00,
        0xf5,0x1d,0xd5,0x82,0x17,0x20,0x9b,0x71,0x4d,0x1f,0xb0,0xb5,0x6e,
        0x8a,0x93,0x15,0xc1,0xc8,0xeb,0xb0,0x16,0xc2,0xda,0x3d,0x54,0x90,
        0xc9,0xce,0x52,0x28,0x7a,0x2c,0xa8,0xf7,0x77,0x21,0x38,0x3d,0x7c,
        0x08,0x08,0x29,0xab,0x9e,0xb5,0x02,0x73,0xd3,0x94,0xa6,0x1a,0x47,
        0x95,0xd9,0x2c,0xf2,0xcd,0xd0,0xff,0xfc,0x6e,0x3f,0xe0,0x0f,0x05,
        0xf4,0xb1,0x69,0xef,0x8d,0x93,0x13,0x79,0x5b,0xb8,0x09,0x9a,0xb1,
        0xc6,0x64,0xf7,0x85,0x3e,0x9c,0xad,0x1c,0xcd,0x5d,0x4b,0xce,0xa0,
        0x09,0xb5,0x5e,0x04,0x58,0xe6,0xc1,0xdf,0x7e,0x01,0x23,0x43,0xba,
        0x38,0xf6,0x72,0x24,0x71,0x6c,0xf0,0xc1,0xd5,0xcf,0x07,0x64,0x31,
        0x93,0x37,0xd6,0xaf,0xd2,0x31,0x4b,0x35,0x1d,0x76,0x81,0x00,0x00,
        0x00,0x15,0x00,0xe6,0xc8,0xea,0x1b,0x64,0xd4,0x25,0xd4,0x4a,0x7c,
        0x4c,0xcb,0xd9,0xdf,0x81,0xcb,0x09,0x30,0x66,0xbd,0x00,0x00,0x00,
        0x80,0x46,0xf7,0x72,0x37,0xd0,0xf7,0xb1,0x4b,0x3e,0x18,0x9d,0x32,
        0x9f,0x4e,0xaa,0xf0,0x4d,0x9b,0x1c,0x69,0x6f,0x99,0x40,0x0e,0xae,
        0xb8,0x4b,0xb5,0xd7,0x23,0x18,0xc0,0x7e,0x4c,0xb7,0x88,0xef,0x7d,
        0xd9,0x3f,0xd1,0x38,0x2f,0x35,0xb6,0xaf,0x1c,0x0a,0xdf,0x14,0x7a,
        0xa6,0x51,0x31,0x7a,0x95,0x21,0x12,0xb3,0x1b,0x16,0x3b,0x0e,0xf0,
        0x9e,0xe1,0x51,0x16,0x4f,0x47,0xeb,0x03,0x83,0x5b,0xdc,0xe1,0x2c,
        0x1a,0x5f,0xa8,0xa4,0x78,0xe6,0x77,0xf6,0xf0,0x59,0x7d,0x72,0xf5,
        0x7d,0xe9,0x51,0xdc,0x06,0x59,0xcc,0xcf,0xda,0x05,0xd2,0xf4,0xe1,
        0x79,0xe1,0xd4,0x03,0x14,0x77,0x3d,0x2b,0x9a,0x67,0x1f,0xb0,0xb5,
        0x2c,0x4b,0x28,0x93,0xa5,0x0d,0xde,0x06,0xdf,0x1d,0x17,0x9e,0x00,
        0x00,0x00,0x81,0x00,0xf2,0x59,0x04,0xb1,0x74,0xb7,0x75,0x86,0x58,
        0x26,0x67,0x06,0xab,0xf7,0x8b,0xc1,0x5e,0xe7,0x18,0x1a,0x8e,0xaa,
        0x99,0x99,0x6e,0xd2,0xa5,0xbd,0xbe,0xcb,0xc1,0x56,0x44,0xa6,0x9f,
        0x3c,0xa9,0x2d,0x13,0xce,0x35,0x87,0x1b,0x51,0x9c,0xf0,0xdc,0xcc,
        0x6d,0xc2,0xc7,0x51,0x49,0xa6,0xf1,0x15,0xac,0xaa,0xb5,0x8a,0xb5,
        0x82,0x0b,0x2d,0x6e,0x14,0x91,0xe3,0x5d,0x21,0xf5,0xc1,0x4a,0xc0,
        0x31,0x67,0x6d,0xc3,0xdf,0xd9,0xec,0x5e,0x3b,0xb4,0x87,0xf3,0xf3,
        0xaf,0x21,0x33,0xd2,0x51,0xa7,0x1e,0x9e,0xb9,0xef,0x28,0xca,0x0c,
        0x0a,0xa7,0xfe,0x95,0xad,0xa4,0x70,0xa4,0x1b,0xd4,0x53,0xf5,0x3a,
        0x16,0x3a,0x68,0xbb,0x1e,0x60,0x38,0x59,0xd7,0xb4,0xd0,0xf7,0x1d,
        0x9e};

      Agent.GetSSH2KeyCallback GetSsh2Key = delegate(byte[] aFingerprint)
      {
        return mSsh2RsaKey;
      };
      Agent agent = new TestAgent(null, GetSsh2Key, null);

      byte[] buffer = new byte[4096];
      Array.Copy(rsaSignRequestData, buffer, rsaSignRequestData.Length);
      MemoryStream stream = new MemoryStream(buffer);

      agent.AnswerMessage(stream);


      // TODO implement test
      Assert.Fail("Test not implemented");
    }

    [Test()]
    public void TestAnswerSSH2_AGENTC_ADD_IDENTITY()
    {
      const string rsaKeyData = "AAADyBEAAAAHc3NoLXJzYQAAAQEAz8k2S0e868NhjaV" +
        "ctuPanK9ekQNzx7Y75cQOsbJi/1UqqinhsfSOfLHfQGpDwy1qm/DhWdhB3YWg1901BX" +
        "uCgLwPGQ1riVO4+6u0QFLYpLCFozbc0JvyWfTazluzrIZrDul/KxfoHzdlVNi0IV8XN" +
        "szHIDwoJVRthedBLE6mxpAjMewzkQDMtcOyrkG324ChJhcbgcVnlHfjH4Yl6coqu4tS" +
        "wdgR1vrgY9fT8FCwiib1fIIITt/ElHsuanpd8paAaBNjYtAuZR/wd+dQJelDePvaxjW" +
        "8BgNVL30lI6csTnyg7nLHwvUqh1iVogsH2XwvlOhklhbeKvcn8zppyemLOwAAAAMBAA" +
        "EAAAEAcS8mrx0VsMtN8W15Mnqtk5oHhjB+OfRvbjo80tjcCj/nLKgBtAEGOLBfbuQzo" +
        "zazEtzEtD8Tqcpnkg6CGklsDhnik3/26ug7JIQkfMFkF1m8geqZn9zCx/OT2MKk/b5+" +
        "xLG2PtAX9iEjxnMAtAjrSUOE2G9MYwE5Y65TlwIE4LWZ3nB5EE8HCd0vrXRzJEqqBP7" +
        "IiQI+HQHmeDmECvEMnIQhrK9g0Uo4o0AA9s4j7CgOhOK4/aoRHpc8YWygCGoIPQQWyG" +
        "o7Nfarnaly36IHmmwHaYvBeWnmdLtvX/zpyyj5vKnmlOSvDTfxYbWpvypGnsuRuekF2" +
        "NYphrfricOqOQAAAIAanwYTU7RE2cHGRA8G3q2Qhs3El6rRcIYTn+LiWIa6comVvuz3" +
        "P8l6AltxrzhXM2tyXAirGOnwEdslvvqP42Ha+ns1HLY/J7v66Vj07CgwovzuYbVNu6O" +
        "SwLGdetKxkVXoU/NiLtabjJqzr/TQGr0bVrK+BSrdelISA0mOrNkcsQAAAIEA6SA1cd" +
        "7dAjQAerXsKkodth+Ayhs+eG+ZCwbAE2YgkObMaDhCtX9JYSR3bS7f9v+pJRmL/HAMS" +
        "LdgYtmuA+yTPTY0Yg3nUY0dlrO8RAmbBQeL/k8zchBhJfSCr1m+NWwqBbeqXcTOLMUj" +
        "IT3YFnJHO0pm5c4KiQUJycvmIpkvTbcAAACBAOQsgKeLZqp7Tpd2bBSJVa2US8yxtc2" +
        "q7SWhJWNkvX1OwZUaRhLibobnI54szgljgno/g0Y3+CEqnTy0vVbeMPsEhNhEOsfNbs" +
        "XnU9NJU4jTS8cOG/1oOXsLqhfaElB4wk+P0ktEJ4W1XY7iQkdUAKg9yHMAy23TJsiwG" +
        "Y1nkC6dAAAAGi9ob21lL2tlZWFnZW50Ly5zc2gvaWRfcnNh";
      const int rsaKeySize = 2048;
      const string rsaKeyComment = "/home/keeagent/.ssh/id_rsa";
      const string rsaKeyFingerprint = "c4:e7:45:dd:a9:1a:35:6a:1f:ef:71:1f:0a:b2:a6:eb";

      const string dsaKeyData = "AAAB6hEAAAAHc3NoLWRzcwAAAIEA9R3Vghcgm3FNH7C" +
        "1boqTFcHI67AWwto9VJDJzlIoeiyo93chOD18CAgpq561AnPTlKYaR5XZLPLN0P/8bj" +
        "/gDwX0sWnvjZMTeVu4CZqxxmT3hT6crRzNXUvOoAm1XgRY5sHffgEjQ7o49nIkcWzww" +
        "dXPB2QxkzfWr9IxSzUddoEAAAAVAObI6htk1CXUSnxMy9nfgcsJMGa9AAAAgEb3cjfQ" +
        "97FLPhidMp9OqvBNmxxpb5lADq64S7XXIxjAfky3iO992T/ROC81tq8cCt8UeqZRMXq" +
        "VIRKzGxY7DvCe4VEWT0frA4Nb3OEsGl+opHjmd/bwWX1y9X3pUdwGWczP2gXS9OF54d" +
        "QDFHc9K5pnH7C1LEsok6UN3gbfHReeAAAAgQDyWQSxdLd1hlgmZwar94vBXucYGo6qm" +
        "Zlu0qW9vsvBVkSmnzypLRPONYcbUZzw3MxtwsdRSabxFayqtYq1ggstbhSR410h9cFK" +
        "wDFnbcPf2exeO7SH8/PdryEz0lGnHp657yjKDAqn/pWtpHCkG9RT9ToWOmi7HmA4Wde" +
        "00PcdngAAABUAs1T5zEgZjLtHlOXQCpO30QIkLGsAAAAaL2hvbWUva2VlYWdlbnQvLn" +
        "NzaC9pZF9kc2E=";
      const int dsaKeySize = 1024;
      const string dsaKeyComment = "/home/keeagent/.ssh/id_dsa";
      const string dsaKeyFingerprint = "71:91:74:0f:42:05:39:04:58:02:a2:1b:51:ae:ab:cc";

      string actual;
      byte[] buffer = new byte[4096];
      byte[] decodedData, response;
      MemoryStream stream = new MemoryStream(buffer);
      PpkKey returnedKey = new PpkKey();
      bool addKeyReturnValue = true;

      Agent.AddSSH2KeyCallback AddSsh2Key = delegate(PpkKey aKey)
      {
        returnedKey = aKey;
        return addKeyReturnValue;
      };

      Agent agent = new TestAgent(null, null, AddSsh2Key);

      /* test adding rsa key */

      decodedData = PSUtil.FromBase64(rsaKeyData);
      Array.Copy(decodedData, buffer, decodedData.Length);
      addKeyReturnValue = true;
      agent.AnswerMessage(stream);
      response = new byte[stream.Position];
      stream.Position = 0;
      stream.Read(response, 0, response.Length);
      actual = Encoding.UTF8.GetString(PSUtil.ToBase64(response));
      Assert.AreEqual(cAgentSucess, actual);
      Assert.IsInstanceOfType(typeof(RsaKeyParameters),
        returnedKey.CipherKeyPair.Public);
      Assert.IsInstanceOfType(typeof(RsaKeyParameters),
        returnedKey.CipherKeyPair.Private);
      Assert.AreEqual(rsaKeySize, returnedKey.Size);
      Assert.AreEqual(rsaKeyComment, returnedKey.Comment);
      Assert.AreEqual(rsaKeyFingerprint,
        PSUtil.ToHex(OpenSsh.GetFingerprint(returnedKey.CipherKeyPair)));

      /* test adding dsa key */

      stream.Position = 0;
      decodedData = PSUtil.FromBase64(dsaKeyData);
      Array.Copy(decodedData, buffer, decodedData.Length);
      addKeyReturnValue = true;
      agent.AnswerMessage(stream);
      response = new byte[stream.Position];
      stream.Position = 0;
      stream.Read(response, 0, response.Length);
      actual = Encoding.UTF8.GetString(PSUtil.ToBase64(response));
      Assert.AreEqual(cAgentSucess, actual);
      Assert.IsInstanceOfType(typeof(DsaKeyParameters),
        returnedKey.CipherKeyPair.Public);
      Assert.IsInstanceOfType(typeof(DsaKeyParameters),
        returnedKey.CipherKeyPair.Private);
      Assert.AreEqual(dsaKeySize, returnedKey.Size);
      Assert.AreEqual(dsaKeyComment, returnedKey.Comment);
      Assert.AreEqual(dsaKeyFingerprint,
        PSUtil.ToHex(OpenSsh.GetFingerprint(returnedKey.CipherKeyPair)));

      /* test AddSsh2Key returns false => ssh agent failure*/

      stream.Position = 0;
      addKeyReturnValue = false;
      agent.AnswerMessage(stream);
      response = new byte[stream.Position];
      stream.Position = 0;
      stream.Read(response, 0, response.Length);
      actual = Encoding.UTF8.GetString(PSUtil.ToBase64(response));
      Assert.AreEqual(cAgentFailure, actual);
    }

    [Test()]
    public void TestDsaSig()
    {
      DSA dsa1 = DSA.Create();
      DSAParameters dsa1params = dsa1.ExportParameters(true);

      DsaParameters dsa2common = new DsaParameters(
          new BigInteger(1, dsa1params.P),
          new BigInteger(1, dsa1params.Q),
          new BigInteger(1, dsa1params.G));
      DsaPublicKeyParameters dsa2public = new DsaPublicKeyParameters(
          new BigInteger(1, dsa1params.Y), dsa2common);
      DsaPrivateKeyParameters dsa2private = new DsaPrivateKeyParameters(
          new BigInteger(1, dsa1params.X), dsa2common);

      byte[] data = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 };

      SHA1 sha = SHA1.Create();
      sha.ComputeHash(data);
      byte[] dsa1result = dsa1.CreateSignature(sha.Hash);

      ISigner dsa2signer = SignerUtilities.GetSigner("SHA-1withDSA");
      //algName = PpkFile.PublicKeyAlgorithms.ssh_dss;

      dsa2signer.Init(true, dsa2private);
      dsa2signer.BlockUpdate(data, 0, data.Length);
      byte[] dsa2result = dsa2signer.GenerateSignature();

      Assert.IsTrue(dsa1.VerifySignature(sha.Hash, dsa2result));

      dsa2signer.Init(false, dsa2public);
      dsa2signer.BlockUpdate(data, 0, data.Length);

      Assert.IsTrue(dsa2signer.VerifySignature(dsa1result));

    }
  }
}
